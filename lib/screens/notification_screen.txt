import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../models/saving_db.dart';
import '../models/transaction_db.dart'; // Your transaction database model

class NotificationScreen extends StatefulWidget {
  const NotificationScreen({super.key});

  @override
  _NotificationScreenState createState() => _NotificationScreenState();
}

class _NotificationScreenState extends State<NotificationScreen> {
  bool loading = false;
  List<Map<String, String>> notifications = [];

  @override
  void initState() {
    super.initState();
  }

  // Function to generate financial notifications
  Future<void> _generateFinancialNotification() async {
    setState(() {
      loading = true;
    });

    // Fetch income, expenses, and savings goal from the DBs
    double income = await TransactionDB().getTotalIncome();
    double expenses = await TransactionDB().getTotalExpenses();
    double? savingsGoal = await SavingGoalDB().fetchSavingGoal();

    savingsGoal ??= 0.0;

    // Calculate savings progress
    double savingsProgress = income - expenses;

    // Generate financial advice
    String message =
        _generateAdvice(income, expenses, savingsGoal, savingsProgress);

    // Get the current time formatted as "hour:minute AM/PM"
    String time = _formatCurrentTime();

    setState(() {
      loading = false;
      notifications.add({
        "message": message,
        "time": time,
      });
    });
  }

  String _generateAdvice(double income, double expenses, double savingsGoal,
      double savingsProgress) {
    double percentageSaved = (savingsProgress / savingsGoal) * 100;

    if (savingsProgress < savingsGoal) {
      return "Based on your income of \$${income.toStringAsFixed(2)}, expenses of \$${expenses.toStringAsFixed(2)}, and a savings goal of \$${savingsGoal.toStringAsFixed(2)}, you're currently saving \$${savingsProgress.toStringAsFixed(2)}. Keep it up! Consider reducing discretionary spending by 10% to reach your goal faster.";
    } else {
      return "Great job! You're on track to meet your savings goal. You have saved \$${savingsProgress.toStringAsFixed(2)} towards your goal of \$${savingsGoal.toStringAsFixed(2)}. Keep going!";
    }
  }

  // Format the current time to "hour:minute AM/PM"
  String _formatCurrentTime() {
    final DateFormat timeFormat = DateFormat.jm();
    return timeFormat.format(DateTime.now());
  }

  void _deleteNotification(int index) {
    setState(() {
      notifications.removeAt(index);
    });
  }

  void _showDeleteDialog(BuildContext context, int index) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text("Delete Notification"),
          content:
              const Text("Are you sure you want to delete this notification?"),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(),
              child: const Text("Cancel"),
            ),
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
                _deleteNotification(index);
              },
              child: const Text("Delete"),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text("Financial Notifications"),
        elevation: 4,
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => Navigator.pop(context),
        ),
      ),
      body: Stack(
        children: [
          Column(
            children: [
              // Button to generate financial notification
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: ElevatedButton(
                  onPressed: _generateFinancialNotification,
                  child: const Text("Generate Notification"),
                ),
              ),
              // List of notifications
              Expanded(
                child: ListView.builder(
                  itemCount: notifications.length,
                  padding: const EdgeInsets.all(8),
                  itemBuilder: (context, index) {
                    return Dismissible(
                      key: UniqueKey(),
                      direction: DismissDirection.endToStart,
                      confirmDismiss: (direction) async {
                        _showDeleteDialog(context, index);
                        return false; // Return false to let the dialog handle deletion
                      },
                      background: Container(
                        color: Colors.red,
                        alignment: Alignment.centerRight,
                        padding: const EdgeInsets.only(right: 16),
                        child: const Icon(Icons.delete, color: Colors.white),
                      ),
                      child: NotificationCard(
                        message: notifications[index]["message"]!,
                        time: notifications[index]["time"]!,
                      ),
                    );
                  },
                ),
              ),
            ],
          ),
          if (loading)
            const Center(
              child: CircularProgressIndicator(),
            ),
        ],
      ),
    );
  }
}

// NotificationCard Widget
class NotificationCard extends StatelessWidget {
  final String message;
  final String time;

  const NotificationCard({super.key, required this.message, required this.time});

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 5,
      margin: const EdgeInsets.symmetric(vertical: 10, horizontal: 15),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),
      child: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(message, style: const TextStyle(fontSize: 16)),
            const SizedBox(height: 10),
            Text(time,
                style: const TextStyle(fontSize: 12, color: Colors.grey)),
          ],
        ),
      ),
    );
  }
}
